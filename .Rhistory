plot(attributes(gg)[1])
plot(attributes(gg)[1])
attributes(gg)[1]
gg
gg[1]
plot(gg[1])
class(gg[1])
makeMoves <- function(gr,car){
carMvmt <- 0
numBlocked <- 0
numCars = length(which(gr[,]==car))
for (i in 1:nrow(gr)) {
irow = gr[i,]
Moved = 0
Count = 1
while(Count > 0 & length(which(irow == car)) !=0){
#Note that this stops the while loop if there are no cars left to move
#Line below asks which current position has a CarVal, and which position after has a 0
moveNow = which(irow == car & c(irow[-1],irow[1]) == 0)
#For dealing with wrap around, if any of the cars that want to move are in the last position, go into this loop
if(any(moveNow == length(irow))){
#This takes away the one that wants to be at the end, moves all the rest, and then moves the last one.
moveNow = moveNow[-which(moveNow == length(irow))]
irow[moveNow+1] = 4
irow[moveNow] = 0
irow[1] = 4
irow[length(irow)] = 0
if(length(moveNow) ==0){
Count = 1
}else{
Count = length(moveNow)+1
}
}else{
#If there wasn't a wrap around issue, just keep going
irow[moveNow+1] = 4
irow[moveNow] = 0
Count = length(moveNow)
}
#Update Moved, and continue the loop
Moved = Moved +Count
}
carMvmt <- carMvmt + sum(irow[]==4)
irow[irow ==4] = car
gr[i,] = irow
}
numBlocked <- (numCars - carMvmt)
attr(gr, "moved") <- carMvmt
attr(gr, "blocked") <- numBlocked
class(gr) = "grid"
return(gr)
}
gg <- moveCar(g2,10)
gg
class(gg)
class(gg[1])
moveCar <- function(gr,time) {
tvals <- c(1:time)
#create data frame to hold information
velocity <- rep(0,time)
blocked <-rep(0,time)
carMoves <- data.frame(time = tvals, velocity = velocity, blocked = blocked)
for (i in 1:length(tvals)){
if (tvals[i] %% 2 != 0) { #if t is odd
car <- 2
gr <- makeMoves(gr, car)
carMoves$velocity[i] <- as.numeric(attributes(gr)[[3]])
carMoves$blocked[i] <-as.numeric(attributes(gr)[[4]])
}
else{
#if t is even
car <- 3
#need to rotate grid so that we can make blue move "right
gr <- rotate(gr,"cw")
gr <- makeMoves(gr,car)
#need to rotate grid back?
carMoves$velocity[i] <- as.numeric(attributes(gr)[[3]])
carMoves$blocked[i] <-as.numeric(attributes(gr)[[4]])
gr <- rotate(gr, "ccw")
}
}
plot(gr)
return(carMoves)
}
gg <- moveCar(g2,10)
gg
moveCar(g2,10)
moveCar <- function(gr,time) {
tvals <- c(1:time)
#create data frame to hold information
velocity <- rep(0,time)
blocked <-rep(0,time)
carMoves <- data.frame(time = tvals, velocity = velocity, blocked = blocked)
for (i in 1:length(tvals)){
if (tvals[i] %% 2 != 0) { #if t is odd
car <- 2
gr <- makeMoves(gr, car)
carMoves$velocity[i] <- as.numeric(attributes(gr)[[3]])
carMoves$blocked[i] <-as.numeric(attributes(gr)[[4]])
}
else{
#if t is even
car <- 3
#need to rotate grid so that we can make blue move "right
gr <- rotate(gr,"cw")
gr <- makeMoves(gr,car)
#need to rotate grid back?
carMoves$velocity[i] <- as.numeric(attributes(gr)[[3]])
carMoves$blocked[i] <-as.numeric(attributes(gr)[[4]])
gr <- rotate(gr, "ccw")
}
plot(gr)
}
return(carMoves)
}
moveCar(g2,10)
moveCar(g2,15)
createGrid <- function(r,c,p){
if (p > 0 | p > 1){
p = .5
sprintf("specified p value out of range, using p = .5")
}
else{
grSize = r*c
numCars = p*r*c
gr <- structure(matrix(0, nrow = r,ncol = c), class = "grid")
carPos = sample(1:grSize, numCars)
carColor = sample(c(2, 3), numCars, replace = TRUE, prob = c(.5,.5))
gr[carPos] = carColor
gr
}
}
createGrid(3,3,.2)
createGrid <- function(r,c,p){
if (p < 0 | p > 1){
p = .5
sprintf("specified p value out of range, using p = .5")
}
else{
grSize = r*c
numCars = p*r*c
gr <- structure(matrix(0, nrow = r,ncol = c), class = "grid")
carPos = sample(1:grSize, numCars)
carColor = sample(c(2, 3), numCars, replace = TRUE, prob = c(.5,.5))
gr[carPos] = carColor
gr
}
return(gr)
}
createGrid(3,3,.2)
createGrid(3,3,2)
createGrid <- function(r,c,p){
if (p < 0 | p > 1){
p = .5
sprintf("specified p value out of range, using p = .5")
}
grSize = r*c
numCars = p*r*c
gr <- structure(matrix(0, nrow = r,ncol = c), class = "grid")
carPos = sample(1:grSize, numCars)
carColor = sample(c(2, 3), numCars, replace = TRUE, prob = c(.5,.5))
gr[carPos] = carColor
gr
return(gr)
}
createGrid(3,3,2)
createGrid(4,4,4)
createGrid <- function(r,c,p){
grSize = r*c
numCars = p*r*c
gr <- structure(matrix(0, nrow = r,ncol = c), class = "grid")
carPos = sample(1:grSize, numCars)
carColor = sample(c(2, 3), numCars, replace = TRUE, prob = c(.5,.5))
gr[carPos] = carColor
gr
return(gr)
}
createGrid(4,4,4)
createGrid(4,4,.4)
moveCar(g2,15)
gg <- moveCar(g2,15)
gg
moveCar <- function(gr,time) {
tvals <- c(1:time)
#create data frame to hold information
velocity <- rep(0,time)
blocked <-rep(0,time)
carMoves <- data.frame(time = tvals, velocity = velocity, blocked = blocked)
for (i in 1:length(tvals)){
if (tvals[i] %% 2 != 0) { #if t is odd
car <- 2
gr <- makeMoves(gr, car)
carMoves$velocity[i] <- as.numeric(attributes(gr)[[3]])
carMoves$blocked[i] <-as.numeric(attributes(gr)[[4]])
}
else{
#if t is even
car <- 3
#need to rotate grid so that we can make blue move "right
gr <- rotate(gr,"cw")
gr <- makeMoves(gr,car)
#need to rotate grid back?
carMoves$velocity[i] <- as.numeric(attributes(gr)[[3]])
carMoves$blocked[i] <-as.numeric(attributes(gr)[[4]])
gr <- rotate(gr, "ccw")
}
plot(gr)
}
print(gr)
return(carMoves)
}
gg
gg <- moveCar(g2,15)
gg
?pkg.skeleton
library("myTrafficGrid", lib.loc="/Users/esievers/Library/R/2.15/library")
?moveCars
?createGrid
gg <- createGrid(24,26,.5)
plot(gg)
moveCar(gg,100)
moveCar(gg,50)
Rprof("13by15grid_lowDensity.prof")
gg1 <- createGrid(13,15,.2)
plot(gg1)
moveCar(gg1,24)
Rprof(NULL)
summaryRprof("13by15grid_lowDensity.prof")
Rprof("13by15grid_medDensity.prof")
gg2 <- createGrid(13,15,.5)
plot(gg2)
moveCar(gg2,24)
Rprof(NULL)
summaryRprof("13by15grid_medDensity.prof")
Rprof("13by15grid_highDensity.prof")
gg3 <- createGrid(13,15,.7)
plot(gg3)
moveCar(gg3,24)
Rprof(NULL)
summaryRprof("13by15grid_highDensity.prof")
gg <- createGrid(20,30,.7)
plot(gg)
moveCar(gg,30)
gg <- createGrid(20,30,.3)
moveCar(gg,30)
lowD <- moveCar(gg,30)
lowD
gg2<-createGrid(20,30,.5)
plot(gg2)
medD <- moveCar(gg2,30)
medD
gg3<-createGrid(20,30,.8)
plot(gg3)
highD <- moveCar(gg3,30)
highD
medD
lowD
lowD <- moveCar(gg,50)
lowD
medD <- moveCar(gg2,50)
medD
highD <- moveCar(gg3,50)
highD
lowD <- moveCar(gg,50)
plot(gg)
lowD
plot(gg)
lowD <- moveCar(gg,50)
plot(gg2)
plot(gg3)
plot(gg2)
medD <- moveCar(gg2,50)
medD
plot(gg3)
highD <- moveCar(gg3,50)
highD
library("myTrafficGrid", lib.loc="/Users/esievers/Library/R/2.15/library")
gr <- createGrid(20,30,.5)
plot(gr)
gr <- createGrid(30,50,.5)
gr <- createGrid(50,50,.5)
plot(gr)
moveCar(gr,20)
df <- moveCar(gr,20)
class(df)
df
?moveCar
createGrid(4,5,.6)
?which
library("BMLtraffic", lib.loc="/Users/esievers/Library/R/2.15/library")
gg <- createGrid(50,50, .6)
plot(gg)
moveCar(gg,40)
g2<-moveGrid(gg,20)
plot(g2)
g2<-moveGrid(gg,40)
plot(g2)
g2<-moveGrid(gg,50)
plot(g2)
g2
plot(g2)
g2 <- moveGrid(gg, 100)
plot(g2)
class(g2)
rm(g2)
g2 <- moveGrid(gg, 100)
plot(g2)
plot(g2)
g2 <- moveGrid(gg, 400)
plot(g2)
g2 <- moveGrid(gg, 500)
plot(g2)
moveCar(gg, 50)
g3 <- moveGrid(gg, 500)
plot(g3)
g3 <- moveGrid(gg, 1000)
plot(g3)
g3 <- moveGrid(gg, 10000)
plot(g3)
moveCar(gg, 50)
moveCar(gg,2)
plot(moveGrid(gg,2))
plot(moveGrid(gg,40))
plot(moveGrid(gg,70))
plot(moveGrid(gg,70000))
plot(moveGrid(gg,70000000))
plot(moveGrid(gg,7000000000000))
plot(moveGrid(gg,70000000000))
plot(moveGrid(gg,70000000))
g <- createGrid(5,5,.7)
plot(g)
moveGrid(g,1)
plot(moveGrid(g,1))
plot(moveGrid(g,2))
plot(moveGrid)
plot(g)
plot(moveGrid(g,1))
gg <- moveGrid(g,1)
plot(gg)
ll - readLines(con, n=3)
?table
View(gr)
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detectCores()
makeCluster
cmd = "for i in %s; do
echo $ i
egrep $i %s*.csv | wc -l
done"
sprintf( cmd, "LAX SFO SMF OAK", "[1]")
clusterEvalQ(cl, rnorm(1))
install.packages("RSQLite")
library("RSQLite", lib.loc="/Users/esievers/Library/R/2.15/library")
create table delays (
Year int,
Month int,
DayofMonth int,
DayOfWeek int,
DepTime  int,
CRSDepTime int,
ArrTime int,
CRSArrTime int,
UniqueCarrier varchar(5),
FlightNum int,
TailNum varchar(8),
ActualElapsedTime int,
CRSElapsedTime int,
AirTime int,
ArrDelay int,
DepDelay int,
Origin varchar(3),
Dest varchar(3),
Distance int,
TaxiIn int,
TaxiOut int,
Cancelled int,
CancellationCode varchar(1),
Diverted varchar(1),
CarrierDelay int,
WeatherDelay int,
NASDelay int,
SecurityDelay int,
LateAircraftDelay int
);
.separator ,
.import 2008.csv delays
#delete from delays where typeof(year) == "text";
create index year on delays(year);
create index date on delays(year, month, dayofmonth);
create index origin on delays(origin);
create index dest on delays(dest);
dr = dbDriver("SQLite")
create table delays (
Year int,
Month int,
DayofMonth int,
DayOfWeek int,
DepTime  int,
CRSDepTime int,
ArrTime int,
CRSArrTime int,
UniqueCarrier varchar(5),
FlightNum int,
TailNum varchar(8),
ActualElapsedTime int,
CRSElapsedTime int,
AirTime int,
ArrDelay int,
DepDelay int,
Origin varchar(3),
Dest varchar(3),
Distance int,
TaxiIn int,
TaxiOut int,
Cancelled int,
CancellationCode varchar(1),
Diverted varchar(1),
CarrierDelay int,
WeatherDelay int,
NASDelay int,
SecurityDelay int,
LateAircraftDelay int
);
.separator ,
.import 2008.csv delays
#delete from delays where typeof(year) == "text";
create index year on delays(year);
create index date on delays(year, month, dayofmonth);
create index origin on delays(origin);
create index dest on delays(dest);
install.packages("snowfall")
library("snowfall", lib.loc="/Users/esievers/Library/R/2.15/library")
dir()
ls()
rm(list = ls())
library("snowfall", lib.loc="/Users/esievers/Library/R/2.15/library")
detach("package:snow", unload=TRUE)
library("snow", lib.loc="/Users/esievers/Library/R/2.15/library")
detectCores()
detectCore()
??detectCore
library(parallel)
detectCores()
?lapply
?sfapply
??sfapply
sprintf('subTestWrap(%d)')
p <- 101
sprintf('subTestWrap(%d)',p)
pp <- c(001, 002, 003, 004)
pp
pp <- c('001', '002', '003', '004')
pp
class(pp)
cmd <- sprintf('/Applications/MATLAB_R2011a.app/bin/matlab -nodesktop -r subTestWrap(%c) ',pp)
cmd <- sprintf('/Applications/MATLAB_R2011a.app/bin/matlab -nodesktop -r subTestWrap(%s) ',pp)
cmd
getwd()
setwd('./Desktop/sta242/matlab/')
dir()
subs <- c('001', '002', '003', '004')
subs
subs(1)
subs[1]
lapply(subs, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(subs, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(subs, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(subs, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(subs, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(subs, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
subs
tt <- subs[1]
tt
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
source('~/Desktop/sta242/matlab/rToMatTest.R')
lapply(tt, rToMatTest)
lapply(subs, rToMatTest)
cl = makeCluster(2, type = "FORK")
?parLapply
parLapply(cl, subs, rToMatTest)
system.time(parLapply(cl, subs, rToMatTest))
system.time(lapply(subs, rToMatTest))
getwd()
setwd('./projectMatlab/')
dir()
?sfLapply
?snowfall
?paralle
?parallel
library(help = "parallel")
?clusterLapply
?clusterApplyLB
